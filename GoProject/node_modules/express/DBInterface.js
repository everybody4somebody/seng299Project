/*
Database wrapper for SENG299 go project
Author: Michael Alward
Very little error control in this version of the code, needs to be updated for that
*/

var MongoClient = require('mongodb').MongoClient
  , assert = require('assert');
// Connection URL
var url = 'mongodb://localhost:27017/myproject';
	
//Login function
//Checks if a username, password combo is present in the database and returns user data on completion
//Inputs:
//	myUsername:string, 
//	myPassword:string, 
//	callback:function - a callback function that can accept json format data
function login(myUsername, myPassword, callback){
	MongoClient.connect(url, function(err, db) {
		assert.equal(null, err);
		console.log("Connected successfully to server");
		findDocument(db, 'users', {'user' : myUsername, 'password' : myPassword}, callback);
		db.close();
	});
}

//Create account function
//Creates a new user account
//Inputs:
//	myUsername:string, 
//	myPassword:string, 
//	callback:function - a callback function to be executed on completion
function createAccount(myUsername, myPassword, callback){
	MongoClient.connect(url, function(err, db) {
		assert.equal(null, err);
		console.log("Connected successfully to server");
		insertDocument(db, 'users', {'user':myUsername, 'password':myPassword, 'wins':0, 'losses':0, 'ELO':0}, callback);
		db.close();
	});
}

//Update function
//Updates player stats and stores replays
//Inputs:
//	myUsername:string, 
//	myStats:json object, could be modified to an array if needed
//	myReplay:what goes in is what comes out
//	callback:function - a callback function to be executed on completion

//Get replays from the server
function getReplays(myUsername, callback){
	MongoClient.connect(url, function(err, db){
		assert.equal(null, err);
		console.log("Connected successfully to server");
		findDocument(db, 'replays', {'user':myUsername}, callback);
		db.close();
	})
}
function getAllusers (callback) {
	// Get the documents collection
	MongoClient.connect(url, function(err, db){
		assert.equal(null, err);
		console.log("Connected successfully to server");
		var collection = db.collection('users');
		// Find some documents
		collection.find().toArray(function(err, docs) {
			//console.log(docs);
			assert.equal(err, null);
			callback(docs)
		});			
		db.close();
	})	
}	

//Modify a document
function updateStats(myUsername, myStats, myReplay, callback){
	MongoClient.connect(url, function(err, db) {
		assert.equal(null, err);
		console.log("Connected successfully to server");
		
		//var replayCollection = db.collection('replays');
		var userCollection = db.collection('users');
		
		userCollection.update({user : myUsername}, {$set:myStats}, function(err, docs){
			console.log('user: ' + myUsername + ' stats updated');
		});

		insertDocument(db, 'replays', {'user':myUsername, 'replay':myReplay}, callback);
		
		/*
		userCollection.find({user : myUsername}).toArray(function(err, docs){
			assert.equal(err, null);
			
			var myWins = docs[0]['wins'];
			var myLosses = docs[0]['losses'];
			if(winner['winner'] == 'Player 1'){
				myWins += 1;
			} else {
				myLosses += 1;
			}
			console.log('WINS: ' + myWins);
			console.log('LOSSES: ' + myLosses);
			
			
			
			userCollection.update({user : myUsername}, {$set:{wins : myWins, losses : myLosses}}, function(err, docs){
				console.log('user: ' + myUsername + ' stats updated');
			});
		});
		
		
		/*
		findDocument(db, 'users', {'user' : myUsername}, function(docs){
			myStats = docs;
			console.log(docs);
			console.log("TEST " + myStats);

			
			var myWins = myStats['wins']
			var myLosses = myStats['losses']
			
			if(myUsername == winner['winner']){
				myWins += 1;
			} else {
				myLosses += 1;
			}
			console.log("TEST PRE DB UPDATE");
			db.collection('replays').findAndModify({'user':myUsername}, [['user' , 1]], {'wins' : myWins, 'losses' : myLosses},
				function(db){
					console.log("User updated");
					insertDocument(db, 'replays', {'user':myUsername, 'replay':myReplay}, callback)
				}
			)
		});
		*/

		db.close();
	});
}

//making functions available
module.exports = {login : login, createAccount : createAccount, updateStats : updateStats, getReplays : getReplays, DBDump : DBDump, getAllusers: getAllusers};


//Functions used internally beyond this comment



//Insert function
function insertDocument(db, collectionName, myDocument, callback) {
	// Get the documents collection
	var collection = db.collection(collectionName);
	console.log("COLLECTION NAME: " + collectionName);
	// Insert some documents
	collection.insert(myDocument, {w:1}, function(){
		console.log("File inserted");
		callback();
	});
}

//Query function
function findDocument(db, collectionName, query, callback) {
	// Get the documents collection
	var collection = db.collection(collectionName);
	// Find some documents
	collection.find(query).toArray(function(err, docs) {
		console.log("QUERY= " + query);
		assert.equal(err, null);
		callback(docs);
	});			
}



//debug dump function
function DBDump(collectionName){
	MongoClient.connect(url, function(err, db) {
		assert.equal(null, err);
		console.log("Connected successfully to server");
		var collection = db.collection(collectionName);
		collection.find().toArray(function(err, docs) {
			console.log(docs);
		});
		db.close();
	});

}

